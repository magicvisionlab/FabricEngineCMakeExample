# Setup Build for FabricEngine Module

# Some Globals, which need to be adapted to the FabricEngine Version (maybe we can autodetect them as well ?)
SET(FABRIC_VERSION_MAJ "1")
SET(FABRIC_VERSION_MIN  "12")
SET(FABRIC_VERSION_REV  "0")
SET(FABRIC_VERSION_NO_SUFFIX  "1.12.0")
SET(FABRIC_VERSION  "1.12.0")
SET(FABRIC_VERSION_SUFFIX  "")
SET(FABRIC_DESC  "Dedicated Platform for High-Performance Graphics Applications")


SET(INITIAL_FABRIC_BUILD_OS "")
SET(INITIAL_FABRIC_BUILD_ARCH "")

# Set BUILD_OS
IF(EXISTS $ENV{FABRIC_BUILD_OS})
	SET(INITIAL_FABRIC_BUILD_OS "$ENV{FABRIC_BUILD_OS}")
ELSE(EXISTS $ENV{FABRIC_BUILD_OS})
	# Autodetect Build OS
	IF(WIN32)
		SET(INITIAL_FABRIC_BUILD_OS "Windows")
	ELSEIF(APPLE)
		SET(INITIAL_FABRIC_BUILD_OS "Darwin")
	ELSEIF(UNIX)
		SET(INITIAL_FABRIC_BUILD_OS "Linux")
	ENDIF(WIN32)
ENDIF(EXISTS $ENV{FABRIC_BUILD_OS})

# Set BUILD_ARCH
IF(EXISTS $ENV{FABRIC_BUILD_ARCH})
	SET(INITIAL_FABRIC_BUILD_ARCH "$ENV{FABRIC_BUILD_ARCH}")
ELSE(EXISTS $ENV{FABRIC_BUILD_ARCH})
	# Autodected Architecture
	IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
		SET (INITIAL_FABRIC_BUILD_ARCH "x86_64")
	ELSEIF (CMAKE_SIZEOF_VOID_P EQUAL 4)
		SET (INITIAL_FABRIC_BUILD_ARCH "i686")
	ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)
ENDIF(EXISTS $ENV{FABRIC_BUILD_ARCH})

# Allow Customization
SET(FABRIC_BUILD_OS ${INITIAL_FABRIC_BUILD_OS} CACHE STRING "Build OS for FabricEngine Module" )
SET(FABRIC_BUILD_ARCH ${INITIAL_FABRIC_BUILD_ARCH} CACHE STRING "Build Architecture for FabricEngine Module" )


# More infos from Environment
IF(EXISTS $ENV{FABRIC_EDK_DIR})
	SET(FABRIC_EDK_DIR "$ENV{FABRIC_EDK_DIR}")
ELSE(EXISTS $ENV{FABRIC_EDK_DIR})
	MESSAGE(ERROR "The 'FABRIC_EDK_DIR' environment variable must be set.")
ENDIF(EXISTS $ENV{FABRIC_EDK_DIR})

IF(EXISTS $ENV{FABRIC_TOOLS_DIR})
	SET(FABRIC_TOOLS_DIR "$ENV{FABRIC_TOOLS_DIR}")
ELSE(EXISTS $ENV{FABRIC_TOOLS_DIR})
	MESSAGE(ERROR "The 'FABRIC_TOOLS_DIR' environment variable must be set.")
ENDIF(EXISTS $ENV{FABRIC_TOOLS_DIR})

# Add the EDK includes
INCLUDE_DIRECTORIES( "${FABRIC_EDK_DIR}/include")

# Define kl2edk tool
SET(KL2EDK_BINARY "${FABRIC_TOOLS_DIR}/kl2edk")
IF(FABRIC_BUILD_OS STREQUAL "Windows")
	SET(KL2EDK_BINARY "${FABRIC_TOOLS_DIR}/kl2edk.exe")
ENDIF(FABRIC_BUILD_OS STREQUAL "Windows")

# Set the build flags
SET(FABRIC_MODULE_CFLAGS "")
SET(FABRIC_MODULE_LINKFLAGS "")

IF(CMAKE_BUILD_TYPE MATCHES RELEASE)
	SET(FABRIC_MODULE_DEFINES "NDEBUG")
ENDIF(CMAKE_BUILD_TYPE MATCHES RELEASE)
	
IF(FABRIC_BUILD_OS STREQUAL "Darwin")
	SET(FABRIC_MODULE_CFLAGS "${FABRIC_MODULE_CFLAGS} -Wall -fvisibility=hidden -mmacosx-version-min=10.7")

	SET(FABRIC_MODULE_LINKFLAGS "${FABRIC_MODULE_LINKFLAGS} -w -mmacosx-version-min=10.7")

	IF(FABRIC_BUILD_ARCH STREQUAL "x86_64")
		SET(FABRIC_MODULE_CFLAGS "${FABRIC_MODULE_CFLAGS} -arch x86_64")
		SET(FABRIC_MODULE_LINKFLAGS "${FABRIC_MODULE_LINKFLAGS} -arch x86_64")
	ENDIF(FABRIC_BUILD_ARCH STREQUAL "x86_64")

	IF(CMAKE_BUILD_TYPE MATCHES DEBUG)
		SET(FABRIC_MODULE_CFLAGS "${FABRIC_MODULE_CFLAGS} -g")
	ELSEIF(CMAKE_BUILD_TYPE MATCHES DEBUG)
		SET(FABRIC_MODULE_CFLAGS "${FABRIC_MODULE_CFLAGS} -O2")
	ENDIF(CMAKE_BUILD_TYPE MATCHES DEBUG)
	
ELSEIF(FABRIC_BUILD_OS STREQUAL "Linux")
	SET(FABRIC_MODULE_DEFINES ${FABRIC_MODULE_DEFINES} "__STDC_LIMIT_MACROS"  "__STDC_CONSTANT_MACROS")

	IF(FABRIC_BUILD_ARCH STREQUAL "i686")
		SET(FABRIC_MODULE_CFLAGS "${FABRIC_MODULE_CFLAGS} -m32")
		SET(FABRIC_MODULE_LINKFLAGS "${FABRIC_MODULE_LINKFLAGS} -m32")
	ELSEIF(FABRIC_BUILD_ARCH STREQUAL "x86_64")
		SET(FABRIC_MODULE_CFLAGS "${FABRIC_MODULE_CFLAGS} -m64")
		SET(FABRIC_MODULE_LINKFLAGS "${FABRIC_MODULE_LINKFLAGS} -m64")
	ENDIF(FABRIC_BUILD_ARCH STREQUAL "i686")

	IF(CMAKE_BUILD_TYPE MATCHES DEBUG)
		SET(FABRIC_MODULE_CFLAGS "${FABRIC_MODULE_CFLAGS} -g")
	ELSEIF(CMAKE_BUILD_TYPE MATCHES DEBUG)
		SET(FABRIC_MODULE_CFLAGS "${FABRIC_MODULE_CFLAGS} -O2")
	ENDIF(CMAKE_BUILD_TYPE MATCHES DEBUG)
	
ELSEIF(FABRIC_BUILD_OS STREQUAL "Windows")
	SET(FABRIC_MODULE_DEFINES ${FABRIC_MODULE_DEFINES} "_SCL_SECURE_NO_WARNINGS=1" "_ITERATOR_DEBUG_LEVEL=0" "_SECURE_SCL=0" "_WIN32_WINNT=0x0600")

	SET(FABRIC_MODULE_CFLAGS "${FABRIC_MODULE_CFLAGS} /EHsc /wd4624")
	SET(FABRIC_MODULE_LINKFLAGS "${FABRIC_MODULE_LINKFLAGS} chkstk.obj")

	IF(FABRIC_BUILD_ARCH STREQUAL "x86_64")
		SET(FABRIC_MODULE_DEFINES ${FABRIC_MODULE_DEFINES} "WIN64")
	ENDIF(FABRIC_BUILD_ARCH STREQUAL "i686")

	IF(CMAKE_BUILD_TYPE MATCHES DEBUG)
		SET(FABRIC_MODULE_CFLAGS "${FABRIC_MODULE_CFLAGS} /Od /Z7 /MTd")
	ELSEIF(CMAKE_BUILD_TYPE MATCHES DEBUG)
		SET(FABRIC_MODULE_CFLAGS "${FABRIC_MODULE_CFLAGS} /Ox /MT")
	ENDIF(CMAKE_BUILD_TYPE MATCHES DEBUG)
ENDIF(FABRIC_BUILD_OS STREQUAL "Darwin")


SET(FABRIC_EXTENSION_NAME "")
SET(FABRIC_EXTENSION_TARGET "")
SET(FABRIC_EXTENSION_SPEC "")
SET(FABRIC_EXTENSION_CPP_SRCS "")
SET(FABRIC_EXTENSION_KL_SRCS "")
SET(FABRIC_EXTENSION_LIBRARIES "")

MACRO(extension_define extension_name extension_spec)
	SET(FABRIC_EXTENSION_NAME ${extension_name})
	SET(FABRIC_EXTENSION_TARGET "${extension_name}-${FABRIC_BUILD_OS}-${FABRIC_BUILD_ARCH}")
	SET(FABRIC_EXTENSION_SPEC ${CMAKE_CURRENT_SOURCE_DIR}/${extension_spec})
ENDMACRO()

MACRO(extension_sources)
    foreach(f "CPP" ${ARGN})
          # ignore filenames, which contain *
          if(f MATCHES "^.*[*].*$")
                  # ignore
      elseif(f STREQUAL "CPP" OR f STREQUAL "KL")
        set(__filesvar "FABRIC_EXTENSION_${f}_SRCS")
      else()
	    get_filename_component(__tmp "${f}" ABSOLUTE)
        list(APPEND ${__filesvar} "${__tmp}")
      endif()
    endforeach()
	unset(__tmp)
	unset(__filesvar)
ENDMACRO()

MACRO(extension_build)

	MESSAGE(STATUS "FabricEngine Extension ${FABRIC_EXTENSION_NAME} with cpp sources: ${FABRIC_EXTENSION_CPP_SRCS} kl sources: ${FABRIC_EXTENSION_KL_SRCS}")

	INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_BINARY_DIR}")
	
	ADD_LIBRARY(${FABRIC_EXTENSION_TARGET} MODULE ${FABRIC_EXTENSION_CPP_SRCS})
	TARGET_LINK_LIBRARIES( ${FABRIC_EXTENSION_TARGET} ${ARGN})

	# set target properties
	SET_TARGET_PROPERTIES( ${FABRIC_EXTENSION_TARGET} PROPERTIES COMPILE_FLAGS "${FABRIC_MODULE_CFLAGS}" )
	SET_TARGET_PROPERTIES( ${FABRIC_EXTENSION_TARGET} PROPERTIES COMPILE_DEFINITIONS "${FABRIC_MODULE_DEFINES}" )
	SET_TARGET_PROPERTIES( ${FABRIC_EXTENSION_TARGET} PROPERTIES LINK_FLAGS "${FABRIC_MODULE_LINKFLAGS}" )
	
	IF(APPLE)
		SET_TARGET_PROPERTIES( ${FABRIC_EXTENSION_TARGET} PROPERTIES SUFFIX ".dylib" )
	ENDIF(APPLE)

	# Missing codegen option
	ADD_CUSTOM_TARGET(create${FABRIC_EXTENSION_NAME}.h 
		COMMAND ${KL2EDK_BINARY} -o ${CMAKE_CURRENT_BINARY_DIR} ${FABRIC_EXTENSION_KL_SRCS}
	)
	ADD_DEPENDENCIES(${FABRIC_EXTENSION_TARGET} create${FABRIC_EXTENSION_NAME}.h)

	INSTALL(TARGETS ${FABRIC_EXTENSION_TARGET} 
        LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX} COMPONENT main
	)
	INSTALL(FILES ${FABRIC_EXTENSION_KL_SRCS} 
		DESTINATION ${CMAKE_INSTALL_PREFIX} COMPONENT main
	)
	INSTALL(FILES ${FABRIC_EXTENSION_SPEC} 
		DESTINATION ${CMAKE_INSTALL_PREFIX} COMPONENT main
	)
	# install header files .. maybe need better approach ..
	INSTALL(FILES 
		${CMAKE_CURRENT_BINARY_DIR}/${FABRIC_EXTENSION_NAME}.h 
		${CMAKE_CURRENT_BINARY_DIR}/global.h 
		${CMAKE_CURRENT_BINARY_DIR}/global_functions.h 
		${CMAKE_CURRENT_BINARY_DIR}/aliases.h
		DESTINATION ${CMAKE_INSTALL_PREFIX} COMPONENT main
	)

ENDMACRO()
